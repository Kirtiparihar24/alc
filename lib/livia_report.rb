#require "rubygems"

require "prawn/core"
require "prawn/layout"

#LiviaReport class is responsible for creating report in the form of PDF.
#pdf object draws the table in the pdf domument using 'table' method. pdf.table accepts table data in the form of array as shown below
#[["row1","row1"],["row2","row2"],["row3","row3"]]
#pdf.table also accepts parameters like :headers(table headers) , :width(table width)

class LiviaReport

  def self.set_headers(pdf,opts)
    pdf.header pdf.margin_box.top_left do
      pdf.text "Law Firm Name   : #{opts[:l_firm]}", :size => 9, :style => :bold
      pdf.text "Report Name     : #{opts[:r_name]}", :size => 9, :style => :bold
      pdf.text "Generated By    : #{opts[:lawyer]}", :size => 9, :style => :bold
      pdf.text "Generated On    : #{Time.zone.now.strftime('%m/%d/%y %H:%M:%S')}", :size => 9, :style => :bold
    end
  end


  #if the generated data from controller is in the form of Hash please call generate_report_with_hash method
  def self.generate_report_with_hash(total_data,headers,len,column_widths,opts,conditions={},alignments={})
    Prawn::Document.new(:page_layout => :landscape,:margin => [30, 50, 50, 50]) do |pdf|
      set_headers(pdf,opts)
	    total = 0
      pdf.bounding_box([pdf.margin_box.left,470], :width => 500, :height => 470) do
        if conditions[:time_accounted_rpt]
          pdf.text "Grand Total : Duration(hrs) : #{decimal_rounding(conditions[:entries][0])} Bill Amount : #{decimal_rounding(conditions[:entries][1])} Discount : #{decimal_rounding(conditions[:entries][2])} Override amount ($) : #{decimal_rounding(conditions[:entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:entries][4])}" ,:style => :bold,:size => 10
        elsif conditions[:time_billed_rpt]
          pdf.text "Grand Total : Hours Accounted : #{decimal_rounding(conditions[:expenses][0])} HoursBilled : #{decimal_rounding(conditions[:expenses][1])} %HoursBilled : #{conditions[:expenses][0] != 0 ? (((conditions[:expenses][1]/conditions[:expenses][0].to_f) * 100).roundf2(2).to_s + "%") : ""} Amount : #{decimal_rounding(conditions[:expenses][2])}" , :size => 10, :style => :bold
        elsif conditions[:matter_time_spent]
          pdf.text "Grand Total : Matter estimated hours  : #{decimal_rounding(conditions[:ehrs])}  Billable hours : #{decimal_rounding(conditions[:bhrs])} Projected hours : #{decimal_rounding(conditions[:rhrs])}",:size => 10, :style => :bold if len > 0
        elsif conditions[:revenue_by_matter_type]
          pdf.text "Grand Total Amount :#{decimal_rounding(conditions[:grand_total][0])}  Grand Total Received : #{decimal_rounding(conditions[:grand_total][1])} Grand Total Discount : #{decimal_rounding(conditions[:grand_total][2])} Grand Total Outstanding : #{decimal_rounding(conditions[:grand_total][3])}",:size => 10, :style => :bold if len > 0
        end
        if conditions[:opportunity_pipe] && len > 0
          pdf.text "Total Records = #{len}  Amt($) = #{conditions[:amount]}",:style => :bold,:size => 10
        elsif conditions[:opportunity_open] && len > 0
          pdf.text "Total Records = #{len}  Total Amt($) = #{decimal_rounding(conditions[:amount])} Average Ageing = #{total/total_data.length}",:style => :bold,:size => 10
        elsif conditions[:time_billed_rpt] && len > 0
          val = len > 1 ? "Records" : "Record"
          pdf.text "Total #{val} = #{len}",:style => :bold, :size => 10
        elsif conditions[:matter_task_status] or conditions[:matter_team_tasks]
          pdf.text "No. of Activities = #{conditions[:total_tasks]}",:style => :bold,:size => 10
        elsif len > 0
          val = len> 1 ? "Records" : "Record"
          pdf.text "Total #{val} = #{len}",:style => :bold, :size => 10
        #elsif  len <= 0
          #pdf.text "Total Record = 0",:style => :bold, :size => 10
        end
        
        total_data.each do |label,records|
        next unless records.present?
          if pdf.y < 120
            pdf.start_new_page
          end
          pdf.pad(10) do
            #Setting Table Label
            if conditions[:rating]
              label = label.to_i
              label.times do
               # pdf.image 'public/images/livia_portal/starR.png'
              end
              (3-label).times do
               # pdf.image 'public/images/livia_portal/starE.png'
              end
              pdf.text "(#{records.length} Records)", :size => 10, :style => :bold
            else
              if conditions[:opportunity_open]
                val=  records.length > 1 ? "Records" : "Record"
                pdf.text "#{(label == "" or !label) ? "None" : label} (#{records.length} #{val})   Amt($) = #{conditions[label][0]}   Average Ageing = #{conditions[label][1]}", :size => 8, :style => :bold
                total += conditions[label][1]
              elsif conditions[:opportunity_pipe]
                val=  records.length > 1 ? "Records" : "Record"
                pdf.text "#{(label == "" or !label) ? "None" : label} (#{records.length} #{val})   Amt($) = #{conditions[label][0]}   Hours = #{conditions[label][1]} ", :size => 8, :style => :bold
              elsif conditions[:account_cont_report]
                val=  records.length > 1 ? "Records" : "Record"
                pdf.text "#{(label == "" or !label) ? "None" : label}   Contacts (#{records.length} #{val}) ", :size => 8, :style => :bold
              elsif conditions[:time_accounted_rpt]
                pdf.text "#{(conditions[:select] == "matter") ? "Matter :  #{label} (#{records.length} Records) #{conditions[label]}" : "Contact : #{label} (#{records.length} Records) "  }" , :size => 8, :style => :bold
              elsif conditions[:time_billed_rpt]
                pdf.text label , :size => 8, :style => :bold
              elsif conditions[:matter_team_tasks]
                pdf.text conditions[:users][label] , :size => 8, :style => :bold
              else
                val=  records.length > 1 ? "Records" : "Record"
                pdf.text "#{(label == "" or !label) ? "None" : label}  (#{records.length} #{val}) ", :size => 8, :style => :bold
              end
              
            end
            
            pdf.pad(3) do
            end
           #Drawing table in Pdf
            pdf.table records,
              :headers => headers,:width => 750 , :column_widths => column_widths,:row_colors => :pdf_writer,
              :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8 ,:align => alignments

            if conditions[:time_billed_rpt]
              pdf.move_down 3
              pdf.text "Hours Accounted : #{decimal_rounding(conditions[label][0])} HoursBilled : #{decimal_rounding(conditions[label][1])} %HoursBilled : #{conditions[label][1] != 0 ? (((conditions[label][0]/conditions[label][1].to_f) * 100).roundf2(2).to_s + "%") : ""} Amt($) : #{decimal_rounding(conditions[label][2])}" , :size => 8, :style => :bold
            elsif conditions[:matter_time_spent]
              pdf.move_down 3
              pdf.text "Matter estimated hours  : #{decimal_rounding(conditions[label][0])}  Billable hours : #{decimal_rounding(conditions[label][1])} Projected hours : #{decimal_rounding(conditions[label][1])}",:size => 8, :style => :bold
            elsif conditions[:revenue_by_matter_type]
              unless label.eql?("By Type")
                pdf.move_down 3
                pdf.text "Total Amount  : #{decimal_rounding(conditions[label][1])}  Total Amount Received : #{decimal_rounding(conditions[label][2])} Total Discount : #{decimal_rounding(conditions[label][3])} Total Outstanding : #{decimal_rounding(conditions[label][4])}",:size => 8, :style => :bold
              end              
            end

          end  #pdf.pad(10)

          


        end#total_data

        if conditions[:time_accounted_rpt]
          pdf.text "Grand Total : Duration(hrs) : #{decimal_rounding(conditions[:entries][0])} Bill Amount : #{decimal_rounding(conditions[:entries][1])} Discount : #{decimal_rounding(conditions[:entries][2])} Override amount ($) : #{decimal_rounding(conditions[:entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:entries][4])}" ,:style => :bold,:size => 10
        elsif conditions[:time_billed_rpt]
          pdf.text "Grand Total : Hours Accounted : #{decimal_rounding(conditions[:expenses][0])} HoursBilled : #{decimal_rounding(conditions[:expenses][1])} %HoursBilled : #{conditions[:expenses][0] != 0 ? (((conditions[:expenses][1]/conditions[:expenses][0].to_f) * 100).roundf2(2).to_s + "%") : ""} Amt($) : #{decimal_rounding(conditions[:expenses][2])}" , :size => 10, :style => :bold
        elsif conditions[:matter_time_spent]
          pdf.text "Grand Total : Matter estimated hours  : #{decimal_rounding(conditions[:ehrs])}  Billable hours : #{decimal_rounding(conditions[:bhrs])} Projected hours : #{decimal_rounding(conditions[:rhrs])}",:size => 10, :style => :bold if len > 0
        elsif conditions[:revenue_by_matter_type]
          pdf.text "Grand Total Amount :#{decimal_rounding(conditions[:grand_total][0])}  Grand Total Received : #{decimal_rounding(conditions[:grand_total][1])} Grand Total Discount : #{decimal_rounding(conditions[:grand_total][2])} Grand Total Outstanding : #{decimal_rounding(conditions[:grand_total][3])}",:size => 10, :style => :bold if len > 0
        end
        
        pdf.move_down 10

        if conditions[:opportunity_pipe] && len > 0
          pdf.text "Total Records = #{len}  Amt($) = #{decimal_rounding(conditions[:amount])}",:style => :bold,:size => 10
        elsif conditions[:opportunity_open] && len > 0
          pdf.text "Total Records = #{len}  Total Amount = #{decimal_rounding(conditions[:amount])} Average Ageing = #{total/total_data.length}",:style => :bold,:size => 10
        elsif conditions[:time_billed_rpt] && len > 0
          val = len > 1 ? "Records" : "Record"
          pdf.text "Total #{val} = #{len}",:style => :bold, :size => 10
        elsif conditions[:matter_task_status] or conditions[:matter_team_tasks]
          pdf.text "No. of Activities = #{conditions[:total_tasks]}",:style => :bold,:size => 10
        elsif len > 0
          val = len> 1 ? "Records" : "Record"
          pdf.text "Total #{val} = #{len}",:style => :bold, :size => 10
        elsif  len <= 0
          pdf.text "Total Record = 0",:style => :bold, :size => 10
        end

      end#bounding

      pdf.number_pages "<page> of <total>",[pdf.margin_box.right,-30]

      #If required Use it
      #pdf.footer [pdf.margin_box.left, pdf.margin_box.bottom] do
      #end
    end.render

  end


  def self.generate_report_for_time_expenses(total_data,total_expenses,headers,len,column_widths,opts,conditions,from,alignments={})
    Prawn::Document.new(:page_layout => :landscape,:margin => [30, 50, 50, 50]) do |pdf|

      set_headers(pdf,opts)

	   
      pdf.bounding_box([pdf.margin_box.left,470], :width => 500, :height => 470) do
        
        total_data.each do |label,records|
          next if records == []
          if pdf.y < 120
            pdf.start_new_page
          end
          pdf.pad(10) do
            if conditions[:contact_accounting_rpt]
              pdf.text "Contact : #{(label == "" or !label) ? "None": [label]}", :size => 10, :style => :bold
            elsif conditions[:matter_accounting_rpt]
              pdf.text "Matter : #{(label == "" or !label) ? "None": conditions[label][6] } - Contact : #{conditions[label][0]}", :size => 10, :style => :bold
            end
            pdf.move_down 2
            pdf.text "Time Accounted ("+records.size.to_s+ (records.size == 1 ? " Record)" : " Records)"), :size => 10, :style => :bold
            time_header_align = { 0 => :center, 1 => :left, 2 => :center , 3 => :left , 4 => :center , 5 => :center , 6 => :center ,7 => :center , 8 => :center , 9 => :center}
            pdf.table records,
              :headers => headers,:width => 750 , :column_widths => column_widths,:row_colors => :pdf_writer,
              :align_headers => time_header_align , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8 ,:align => alignments

            pdf.move_down 2
             
            pdf.text "Duration(hrs) : #{decimal_rounding(conditions[label][1])} , Bill Amount : #{decimal_rounding(conditions[label][2])} , Discount($) : #{decimal_rounding(conditions[label][3])} , Override amount($) : #{decimal_rounding(conditions[label][4])} , Final bill amount($) : #{decimal_rounding(conditions[label][5])}" , :size => 10, :style => :bold

            if total_expenses.has_key?(label)
              pdf.move_down 4
              records = total_expenses[label]
              length=records[0].length
              val = length > 1 ? "Records" : "Record"
              pdf.text "Expenses Accounted   (#{length} #{val})", :size => 10, :style => :bold
              exp_header_align = { 0 => :center, 1 => :left, 2 => :left , 3 => :center , 4 => :center , 5 => :center , 6 => :center ,7 => :center }
              exp_align = { 0 => :center, 1 => :left, 2 => :left , 3 => :center , 4 => :right , 5 => :right , 6 => :right ,7 => :right}
              pdf.table records[0],
                :headers => conditions[:table_headers],:width => 750 , :column_widths => conditions[:column_widths],:row_colors => :pdf_writer,
                :align_headers => exp_header_align , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8,:align => exp_align
              pdf.move_down 2
              pdf.text "Discount(%) : #{decimal_rounding(records[4])} ,Override amount($) : #{decimal_rounding(records[1])} ,Markup(%) : #{decimal_rounding(records[3])} , Final bill amount($) : #{decimal_rounding(records[2])}" , :size => 10, :style => :bold
              total_expenses.delete(label)
            end
          end  #pdf.pad(10)
        end#total_data

        if pdf.y < 120
          pdf.start_new_page
        end

        total_expenses.each do|label,col|
          next if col[0] == []
          pdf.pad(10) do
            pdf.text "#{(conditions[:select] == "matter") ? "Matter : #{label} Contact : #{}" : "Contact : #{label}" } ", :size => 10, :style => :bold
            pdf.move_down 2
            pdf.text "Expenses Accounted", :size => 10, :style => :bold
            exp_header_align = { 0 => :center, 1 => :left, 2 => :left , 3 => :center , 4 => :center , 5 => :center , 6 => :center ,7 => :center }
            exp_align = { 0 => :center, 1 => :left, 2 => :left , 3 => :center , 4 => :right , 5 => :right , 6 => :right ,7 => :right}
            pdf.table col[0],
              :headers => conditions[:table_headers],:width => 750 , :column_widths => conditions[:column_widths],:row_colors => :pdf_writer,
              :align_headers => exp_header_align , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8,:align => exp_align
            pdf.move_down 2
            pdf.text "Discount(%) : #{decimal_rounding(col[4])} ,Override amount($) : #{decimal_rounding(col[1])} ,Markup(%) : #{decimal_rounding(col[3])} , Final bill amount($) : #{decimal_rounding(col[2])}" , :size => 10, :style => :bold
              

          end
        end

        if total_data.length <=0 && total_expenses.length <= 0
          pdf.move_down 2
          pdf.text "Total Record = 0", :size => 10, :style => :bold
        end

        pdf.move_down 10

           if len > 0 && from !="matter_accounting_rpt" && !conditions[:contact_accounting_rpt]
           pdf.text "Total Records = #{len}",:style => :bold,:size => 10
           elsif len < 0 && from !="matter_accounting_rpt"
           pdf.text "Total Record = 0",:style => :bold,:size => 10
           end

      end#bounding

      pdf.number_pages "<page> of <total>",[pdf.margin_box.right,-30]
      #pdf.footer [pdf.margin_box.left, pdf.margin_box.bottom] do
      #end
    end.render

  end




  #if the generated data from controller is in the form of Hash in Hash please call generate_report_with_hash_in_hash method
  def self.generate_report_with_hash_in_hash(total_data,headers,len,column_widths,opts,conditions,alignments={})

    Prawn::Document.new(:page_layout => :landscape,:margin => [30, 50, 50, 50]) do |pdf|


      set_headers(pdf,opts)

	    total = 0

      pdf.bounding_box([pdf.margin_box.left,470], :width => 500, :height => 470) do
      pdf.text "Total Records = #{len}",:style => :bold,:size => 10 if len > 0
        label,a_hash,a_label = nil,nil,nil
        total_data.each do |label,a_hash|
          
          pdf.pad(10) do
            if pdf.y < 120
              pdf.start_new_page
            end
            pdf.text "#{(label == "" or !label) ? "None" : label} : Contacts (#{conditions[label]} Records) ", :size => 10, :style => :bold
            pdf.pad(3) do
            end
            a_hash.each do|a_label,records|

              if pdf.y < 120
                pdf.start_new_page
              end
              val=  records.length > 1 ? "Records" : "Record"
              pdf.text "Account : #{a_label} (#{records.length} #{val})", :size => 10, :style => :bold
              pdf.pad(3) do
              end
              pdf.table records,
                :headers => headers,:width => 750 , :column_widths => column_widths,:row_colors => :pdf_writer,
              :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8 ,:align => alignments

              #Checking for y position in page. If y position less than 150 then starting new page.

              pdf.pad(6) do
              end
            end #a_hash


          end  #pdf.pad(10)



        end#total_data

        pdf.move_down 10


        pdf.text "Total Records = #{len}",:style => :bold,:size => 10 if len > 0


      end#bounding

      pdf.number_pages "<page> of <total>",[pdf.margin_box.right,-30]
      #pdf.footer [pdf.margin_box.left, pdf.margin_box.bottom] do




      #end
    end.render

  end

  #if the generated data from controller is in the form of array please call generate_report_with_array method
  def self.generate_report_with_array(total_data,headers,len,column_widths,opts,conditions,alignments={})

    Prawn::Document.new(:page_layout => :landscape,:margin => [30, 100, 50, 20]) do |pdf|

      set_headers(pdf,opts)
      pdf.move_down(10)
      pdf.bounding_box([pdf.margin_box.left,470], :width => 500, :height => 470) do
      val=  len > 1 ? "Records" : "Record"
        pdf.text "Total #{val} = #{len}",:style => :bold,:size => 10 if len > 0

        if total_data == []
          #Exception will be raised if tried to draw empty data in pdf.
          if conditions[:inactive_act] or conditions[:active_act]
            pdf.pad(10) do
              pdf.text "#{conditions[:table_name]}", :size => 11, :style => :bold
            end
          end
          pdf.move_down 20
          pdf.text "Total Record = 0",:style => :bold,:size => 10
        else
          if conditions[:inactive_act] or conditions[:active_act]
            pdf.pad(10) do
              pdf.text "#{conditions[:table_name]}", :size => 11, :style => :bold
            end
          end
          pdf.table total_data,
            :headers => headers,:width => 750 , :column_widths => column_widths,:row_colors => :pdf_writer,
            :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 8 ,:align => alignments
          pdf.move_down 30
          if conditions[:time_accounted_rpt]
            if conditions[:select] == "all"
              pdf.text "Duration(hrs) : #{decimal_rounding(conditions[:all_entries][0])} Bill Amount : #{decimal_rounding(conditions[:all_entries][1])} Discount : #{decimal_rounding(conditions[:all_entries][2])} Override amount ($) : #{decimal_rounding(conditions[:all_entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:all_entries][4])}", :size => 11, :style => :bold
            elsif conditions[:select] == "internal"
              pdf.text "Duration(hrs) : #{decimal_rounding(conditions[:internal_entries][0])}", :size => 11, :style => :bold
            end
            pdf.move_down 20
          end
            
            pdf.text "Total #{val} = #{len}",:style => :bold,:size => 10 if len > 0

        end
      end #pdf.bounding_box




      pdf.number_pages "<page> of <total>",[pdf.margin_box.right + 20,-30]
      #pdf.footer [pdf.margin_box.left, pdf.margin_box.bottom] do
      #end


    end.render




  end


  def self.generate_compliance_report(total_data,authorities_depts,depts_authorities,ghash,header_opts,opts)

    Prawn::Document.new(:page_layout => :landscape,:margin => [30, 50, 50, 50]) do |pdf|


      set_headers(pdf,header_opts)


      pdf.bounding_box([pdf.margin_box.left,470], :width => 500, :height => 470) do

        
        columns = [["Completed (on Time)",:completed],["Completed (Late)",:completed_late],["Filed (on Time)",:filed],["Filed (Late)",:filed_late],["Overdue",:due]]
        #generate headers
        check = true
        
        depts_authorities.keys.each_slice(4) do |headers|
          
          records = []
          #Set into Array format
          hash = nil
          columns.each do |array|
            row = []
           
            headers.each do|key|
              row << depts_authorities[key][array[1]]
            end
            if check
              records << row.unshift(array[0],ghash[array[1]])
            else
              records << row.unshift(array[0])
            end
          end

          if check
            headers.unshift("","")
            check = false
            hash = {0 => 150, 1=>40, 2=>100, 3=> 100, 4=>100, 5 => 100}
          else
            headers.unshift("")
            hash = {0 => 150, 1=>100, 2=>100, 3=> 100, 4=>100}
          end

          pdf.table records,
            :headers => headers,:width => 750 , :column_widths => hash,
            :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 11 #,:align => {1 => :center}
            
          pdf.move_down 20
          
        end #depts_authorities.keys.each_slice(4)
        pdf.move_up 10
        
        pdf.text "Total = #{opts[:total]}", :size => 11, :style => :bold
        
        pdf.move_down 20
        
        headers = [opts[:flag] == "dept" ? "Authority" : "Department" , "Status","Completed","","Overdue"]
        records = []
        #Set into Array format
        authorities_depts.keys.each do |key|
          records << [key,"",authorities_depts[key][:completed],authorities_depts[key][:completed_late],authorities_depts[key][:due]]
        end

        pdf.table records,
          :headers => headers,:width => 750 , :column_widths => {0 => 100, 1=>100 , 2=>100 , 3=> 100, 4=>100},
          :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 11 #,:align => {1 => :center}

        pdf.move_down 10

        table_headers = ["","Due Date","Filing at","Completed at"]

        total_data.each do |label,hash|
          hash.sort.each do |status,records|
            if pdf.y < 120
              pdf.start_new_page
            end

            pdf.pad(10) do

              #Setting Table Label
              pdf.text label.to_s + " - " + status, :size => 10, :style => :bold
              pdf.pad(3) do
              end

              #Drawing table in Pdf
              pdf.table records,
                :headers => table_headers,:width => 750 , :column_widths => {0 => 200, 1=>120 , 2=>120 , 3=> 120, 4=>120},
                :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 11 #,:align => {1 => :center}

            end  #pdf.pad(10)
          end#hash
        end#total_data
        
        pdf.move_down 10
        
      end#bounding

      pdf.number_pages "<page> of <total>",[pdf.margin_box.right,-30]
      
    end.render


  end


  def self.generate_report_for_invoice(total_data,headers,len,column_widths,opts,conditions)

    Prawn::Document.generate("livia_report.pdf",:page_layout => :landscape,:margin => [30, 100, 50, 20]) do |pdf|

      pdf.header pdf.margin_box.top_left do
        pdf.text "Company Name: #{opts[:company_name]}", :size => 11, :style => :bold
        pdf.text "Invoice Date: #{opts[:invoice_date]}", :size => 11, :style => :bold
        pdf.text "Invoice from: #{opts[:start_date]} to #{opts[:end_date]}", :size => 11, :style => :bold
      end

      pdf.move_down(10)
      pdf.bounding_box([pdf.margin_box.left,470], :width => 590, :height => 470) do
        if total_data == []

        else
          pdf.table total_data,
            :headers => headers,:width => conditions[:table_width] , :column_widths => column_widths,
            :align_headers => :center , :horizontal_padding => 3,:vertical_padding => 3,:font_size => 11 #,:align => {1 => :center}
          #pdf.move_down 30
          pdf.text "Total Amount($) : #{opts[:total_amount]}",  :style => :bold, :align => :right
          #pdf.text "                                                                                                           Total Records = #{len}",:style => :bold,:size => 10 if len > 0
        end
      end

      pdf.number_pages "<page> of <total>",[pdf.margin_box.right + 20,-30]
    end

  end


end
