require 'rubygems'
require 'spreadsheet'
include ApplicationHelper
include ActionView::Helpers::NumberHelper


class LiviaExcelReport

#  This method will create multiple blank rows, taking two parameters sheet object and no of rows to be generated
#  This method is added for the feature no Feature #9582 - Improvement task - export to excel in all view pages in T & E
  def self.create_blank_multiple_rows(sheet,no)
    row = ""
    1.upto(no.to_i) do
      row = create_new_row(sheet)
    end

    row
  end

  def self.create_new_row(sheet)
    index = sheet.instance_variable_get("@index")
    sheet.instance_variable_set("@index",index+=1)
    sheet.row(index)
  end

  def self.format
    @format ||= Spreadsheet::Format.new :weight => :bold,:size => 11
  end

  def self.set_headers(row,headers)
    row.replace headers
    row.default_format = format
  end

  def self.set_report_headers(sheet,opts)
    row = create_new_row(sheet)
    row.replace ["Law Firm Name",opts[:l_firm]]
    row.set_format(0,format) # Highlighting only Label name
    row = create_new_row(sheet)
    row.replace ["Report Name",opts[:r_name]]
    row.set_format(0,format)
    sheet.row(row.idx).height = 25
    row = create_new_row(sheet)
    row.replace ["Generated By",opts[:lawyer]]
    row.set_format(0,format)
    row = create_new_row(sheet)
    row.replace ["Generated On",Time.zone.now.strftime('%m/%d/%y %H:%M:%S')]
    row.set_format(0,format)
  end

  def self.generate_report_with_hash(total_data,headers,len,opts,conditions = {})
    total = 0
    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index 
    sheet.instance_variable_set("@index",-1)
    #formatting column width and row height
    column_format = Spreadsheet::Format.new :text_wrap => true ,:shrink => true
    headers.size.times{|column| sheet.column(column).width = 40 ; sheet.column(column).default_format = column_format}
    #sheet2.instance_variable_set("@index",-1) # if required

    #Creating Report Headers
    set_report_headers(sheet,opts)

    # For solving Bug no 9552 Total Records entry shows extra so removed below code.
    row = create_blank_multiple_rows(sheet,2)
    if conditions[:time_accounted_rpt]
      row = create_new_row(sheet)
     # row.replace ["Grand Total : Duration(hrs) : #{decimal_rounding(conditions[:entries][0])} Bill Amount : #{decimal_rounding(conditions[:entries][1])} Discount : #{decimal_rounding(conditions[:entries][2])} Override amount ($) : #{decimal_rounding(conditions[:entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:entries][4])}"]
      row.default_format = format
    elsif conditions[:time_billed_rpt]
      row = create_new_row(sheet)
      row.replace ["Grand Total : Hours Accounted : #{decimal_rounding(conditions[:expenses][0])} HoursBilled : #{decimal_rounding(conditions[:expenses][1])} %HoursBilled : #{conditions[:expenses][1] != 0 ? (((conditions[:expenses][0]/conditions[:expenses][1].to_f) * 100).roundf2(2).to_s + "%") : ""} Amount : #{decimal_rounding(conditions[:expenses][2])}"]
      row.default_format = format
    elsif conditions[:matter_time_spent] and len > 0
      row = create_new_row(sheet)
      row.replace ["Grand Total : Matter estimated hours  : #{decimal_rounding(conditions[:ehrs])}  Billable hours : #{decimal_rounding(conditions[:bhrs])} Projected hours : #{decimal_rounding(conditions[:rhrs])}"]
      row.default_format = format
    elsif conditions[:revenue_by_matter_type] and len > 0
      row = create_new_row(sheet)
      row.replace ["Grand Total Amount :#{decimal_rounding(conditions[:grand_total][0])}  Grand Total Received : #{decimal_rounding(conditions[:grand_total][1])} Grand Total Discount : #{decimal_rounding(conditions[:grand_total][2])} Grand Total Outstanding : #{decimal_rounding(conditions[:grand_total][3])}"]
      row.default_format = format
    end
    
    row = create_blank_multiple_rows(sheet,2)
    if conditions[:opportunity_pipe] and len > 0
      row.replace ["Total Records = #{len}  Amount ($) = #{(number_with_lformat(conditions[:amount]))}"]
    elsif conditions[:opportunity_open] and len > 0
      row.replace ["Total Records = #{len}   Total Amount ($) = #{(number_with_lformat(conditions[:amount]))}  Average Ageing = #{conditions[:total_avg_age]} Days"]
    elsif conditions[:time_billed_rpt] and len > 0
      val = len > 1 ? "Records" : "Record"
      row.replace ["Total #{val} = #{len}"]
    elsif conditions[:matter_task_status] or conditions[:matter_team_tasks]
      val=  conditions[:total_tasks] > 1 ? "Activities" : "Activity"
      row.replace ["No. Of #{val} Total = #{conditions[:total_tasks]}"]
    elsif len > 0
      val = len > 1 ? "Records" : "Record"
      row.replace ["Total #{val} = #{len}"]
    elsif len <= 0
      row.replace ["Total Records = 0"]
    end
    row.default_format = format
      #Creating Table Label
      total_data.each do |label,records|
      row = create_new_row(sheet)
      
      if conditions[:opportunity_open]
        val=  records.length > 1 ? "Records" : "Record"
        row.replace ["#{(label == "" or !label) ? "None" : label} (#{records.length} #{val})   Amount ($) = #{number_with_lformat(conditions[label][0])}  Hours= #{conditions[label][2]} Average Ageing = #{conditions[label][1]} Days"]
        total += conditions[label][1]
      elsif conditions[:opportunity_pipe]
        val=  records.length > 1 ? "Records" : "Record"
        row.replace ["#{(label == "" or !label) ? "None" : label}  (#{records.length} #{val})  Amount ($) = #{number_with_lformat(conditions[label][0])}  Hours = #{conditions[label][1]}"]
      elsif conditions[:account_cont_report]
        val=  records.length > 1 ? "Records" : "Record"
        row.replace ["#{(label == "" or !label) ? "None" : label}   Contacts (#{records.length} #{val}) "]
      elsif conditions[:time_accounted_rpt]
        val=  records.length > 1 ? "Records" : "Record"
        row.replace ["#{(conditions[:select] == "matter") ? "Matter :  #{label} (#{records.length} #{val} #{conditions[label]})" : "Contact : #{label} (#{records.length} Records) "  }"]
      elsif conditions[:time_billed_rpt]
        row.replace [label]
      elsif conditions[:matter_team_tasks]
        row.replace [conditions[:users][label]]
      else
        val=  records.length > 1 ? "Records" : "Record"
        row.replace [(label == "" or !label) ? "None" : " #{label} " , "(#{records.length} #{val})"]
      end
        
      
      row.default_format = format
      
      #Creating Table Headers
      set_headers(create_new_row(sheet),headers)
      
      records.each do|array|
        #Creating Table Rows
        row = create_new_row(sheet)
        row.replace array
        sheet.row(row.idx).height = 25
      end
      if conditions[:time_billed_rpt]
        row = create_new_row(sheet)
        row.replace ["Hours Accounted : #{decimal_rounding(conditions[label][0])} HoursBilled : #{decimal_rounding(conditions[label][1])} %HoursBilled : #{conditions[label][0] != 0 ? (((conditions[label][1]/conditions[label][0].to_f) * 100).roundf2(2).to_s + "%") : ""} Amount : #{decimal_rounding(conditions[label][2])}"]
        row.default_format = format
      elsif conditions[:matter_time_spent]
        row = create_new_row(sheet)        
        row.replace ["Matter estimated hours  : #{decimal_rounding(conditions[label][0])}  Billable hours : #{decimal_rounding(conditions[label][1])}  Projected hours : #{decimal_rounding(conditions[label][1])}"]
        row.default_format = format
      elsif conditions[:revenue_by_matter_type]
        row = create_new_row(sheet)
        unless label.eql?("By Type")
        row.replace ["Total Amount  : #{decimal_rounding(conditions[label][1])}  Total Amount Received : #{decimal_rounding(conditions[label][2])} Total Discount : #{decimal_rounding(conditions[label][3])} Total Outstanding : #{decimal_rounding(conditions[label][4])}"]
        row.default_format = format
        end        
      end


      row = create_new_row(sheet) #Empty row
    end #total_data.each

    if conditions[:time_accounted_rpt]
      row = create_new_row(sheet)
      row.replace ["Grand Total : Duration(hrs) : #{decimal_rounding(conditions[:entries][0])} Bill Amount : #{decimal_rounding(conditions[:entries][1])} Discount : #{decimal_rounding(conditions[:entries][2])} Override amount ($) : #{decimal_rounding(conditions[:entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:entries][4])}"]
      row.default_format = format
    elsif conditions[:time_billed_rpt]
      row = create_new_row(sheet)
      row.replace ["Grand Total : Hours Accounted : #{decimal_rounding(conditions[:expenses][0])} HoursBilled : #{decimal_rounding(conditions[:expenses][1])} %HoursBilled : #{conditions[:expenses][1] != 0 ? (((conditions[:expenses][0]/conditions[:expenses][1].to_f) * 100).roundf2(2).to_s + "%") : ""} Amount : #{decimal_rounding(conditions[:expenses][2])}"]
      row.default_format = format
    elsif conditions[:matter_time_spent] and len > 0
      row = create_new_row(sheet)
      row.replace ["Grand Total : Matter estimated hours  : #{decimal_rounding(conditions[:ehrs])}  Billable hours : #{decimal_rounding(conditions[:bhrs])} Projected hours : #{decimal_rounding(conditions[:rhrs])}"]
      row.default_format = format
    elsif conditions[:revenue_by_matter_type] and len > 0
      row = create_new_row(sheet)
      row.replace ["Grand Total Amount :#{decimal_rounding(conditions[:grand_total][0])}  Grand Total Received : #{decimal_rounding(conditions[:grand_total][1])} Grand Total Discount : #{decimal_rounding(conditions[:grand_total][2])} Grand Total Outstanding : #{conditions[:grand_total][3]}"]
      row.default_format = format
    end


    row = create_blank_multiple_rows(sheet,2)
    if conditions[:opportunity_pipe] and len > 0
      row.replace ["Total Records = #{len}  Amount ($) = #{number_with_lformat(conditions[:amount])}"]
    elsif conditions[:opportunity_open] and len > 0
      row.replace ["Total Records = #{len}   Total Amount ($) = #{number_with_lformat(conditions[:amount])} Average Ageing = #{conditions[:total_avg_age]} Days"]
    elsif conditions[:time_billed_rpt] and len > 0
      val = len > 1 ? "Records" : "Record"
      row.replace ["Total #{val} = #{len}"]
    elsif conditions[:matter_task_status] or conditions[:matter_team_tasks]
      val=  conditions[:total_tasks] > 1 ? "Activities" : "Activity"
      row.replace ["No. Of #{val} Total = #{conditions[:total_tasks]}"]
    elsif len > 0
      val = len> 1 ? "Records" : "Record"
      row.replace ["Total #{val} = #{len}"]
    end
    row.default_format = format
    
    report =  StringIO.new
    (book.write report )
    report.string
    

  end#self.generate_report_with_hash

  ###This method "generate_xls_for_time_expenses" written for the Feature no 8234 for export to excel in all view pages in T & E
  ##This method "generate_xls_for_time_expenses" will generate excel format of the generate displayed view
  def self.generate_xls_for_time_expenses(total_timeentry,total_expenseentry,headers,opts,type,duration_setting_type)
    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #format column width
    column_format = Spreadsheet::Format.new :text_wrap => true ,:shrink => true
    headers.size.times{|column| sheet.column(column).width = 50 ; sheet.column(column).default_format = column_format}
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    row = create_blank_multiple_rows(sheet,3)
    if type=="matter_view"
      row.replace ["Matter Name",opts[0]]
      row.set_format(0,format)
      row = create_new_row(sheet)
      row.replace ["Start Date",opts[1]]
      row.set_format(0,format)
      row = create_new_row(sheet)
      row.replace ["End Date",opts[2]]
      row.set_format(0,format)
    end
    if type=="contact_view"
      row.replace ["Contact Name",opts[0]]
      row.set_format(0,format)
      row = create_new_row(sheet)
      row.replace ["Start Date",opts[1]]
      row.set_format(0,format)
      row = create_new_row(sheet)
      row.replace ["End Date",opts[2]]
      row.set_format(0,format)
    end
    if type=="internal"
      row.replace ["Start Date",opts[0]]
      row.set_format(0,format)
      row = create_new_row(sheet)
      row.replace ["End Date",opts[1]]
      row.set_format(0,format)
    end

    row = create_blank_multiple_rows(sheet,4)
    set_headers(create_new_row(sheet),headers)
    row = create_blank_multiple_rows(sheet,2)

    timeentries = []
    total_timeentry.each do |entry|
      actual_duration = duration_setting_type ? one_hundredth_timediffernce(entry.actual_duration) : one_tenth_timediffernce(entry.actual_duration)
      unless entry.start_time.blank? and entry.end_time.blank?
        start_time = entry.formatted_start_time
        end_time = entry.formatted_end_time
        time = "Fm"+ " "+ start_time + "-"+ "To" + " " + end_time
      end
      if entry.matter_people_id.blank?
        lawyer_designation = MatterPeople.get_lawyer_designation(entry.performer.id, entry.matter_id)
        designation = entry.try(:performer).try(:first_name) + " " + entry.try(:performer).try(:last_name) + (lawyer_designation.present? ? " / "+lawyer_designation : "")
      else
        designation = entry.matter_people.name.capitalize+ " / Non-User"
      end      
      timeentries << ["Time", entry.time_entry_date.strftime("%m/%d/%Y"), designation, time ,actual_duration.to_s,format_amount(entry.actual_activity_rate),entry.acty_type.try(:alvalue),entry.description.strip,entry.is_billable ? "Y" : "N",format_amount(entry.final_billed_amount) ,entry.status]
    end
    timeentries.each do |time_entry|
      row = create_new_row(sheet)
      row.replace time_entry
    end
    row = create_new_row(sheet)
    expenseentries = []
    total_expenseentry.each do |entry|
      if entry.matter_people_id.blank?
        lawyer_designation = MatterPeople.get_lawyer_designation(entry.performer.id, entry.matter_id)
        designation = entry.try(:performer).try(:first_name) + " " + entry.try(:performer).try(:last_name) + (lawyer_designation.present? ? " / "+lawyer_designation : "")
      else
        designation = entry.matter_people.name.capitalize+ " / Non-User"
      end
      expenseentries << ["Expense", entry.expense_entry_date.strftime("%m/%d/%Y"), designation, "", "","",entry.expense.try(:alvalue),entry.description.strip,entry.is_billable ? "Y" : "N",format_amount(entry.final_expense_amount),entry.status]
    end
    expenseentries.each do |expense_entry|
      row = create_new_row(sheet)
      row.replace expense_entry
    end
    total = (timeentries + expenseentries).size
    if total==0
      row = create_new_row(sheet)
      row.replace ["No record(s) found."]
    end
    #setting row height
    (12..(total + 15)).each {|rows| sheet.row(rows).height = 40}
    row = create_blank_multiple_rows(sheet,2)
    legends = ["T/E:- Time/Expense, Fm:- From, HH:- Hour, MM:-Minute, Dur:- Duration, Amt:- Amount"]
    row = create_new_row(sheet)
    row.replace [legends[0]]

    report =  StringIO.new
    (book.write report )
    report.string
  end
  
  def self.generate_report_for_time_expenses(total_data,total_expenses,headers,len,opts,conditions)
    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    #sheet2.instance_variable_set("@index",-1) # if required

    #Creating Report Headers
    set_report_headers(sheet,opts)

    row = create_new_row(sheet)

    total_data.each do |label,records|
      next if records == []
      
      row = create_new_row(sheet)
      if conditions[:contact_accounting_rpt]
        row.replace ["Contact : #{(label == "" or !label) ? "None": [label]} "]
      elsif conditions[:matter_accounting_rpt]
        row.replace ["Matter : #{(label == "" or !label) ? "None": conditions[label][6] }, Contact : #{conditions[label][0]} "]
      end
      row.default_format = format
      row = create_new_row(sheet)
      row.replace ["Time Accounted (" + records.size.to_s + (records.size == 1 ? " Record)" : " Records)").to_s]
      row.default_format = format

      #Creating Table Headers
      set_headers(create_new_row(sheet),headers)
      
      records.each do|array|
        #Creating Table Rows
        row = create_new_row(sheet)
        row.replace array
      end

      row = create_new_row(sheet)

      row.replace ["Duration(hrs) : #{decimal_rounding(conditions[label][1])} , Bill Amount : #{decimal_rounding(conditions[label][2])} , Discount($) : #{decimal_rounding(conditions[label][3])} , Override amount($) : #{decimal_rounding(conditions[label][4])} , Final bill amount($) : #{decimal_rounding(conditions[label][5])}"]
      row.default_format = format

      if total_expenses.has_key?(label)
        length = records[0].length
        val = length > 1 ? "Records" : "Record"
        row = create_new_row(sheet)
        records = total_expenses[label]
        row = create_new_row(sheet)
        row.replace ["Expenses Accounted (#{(records[0].count).to_s} #{val})"]
        row.default_format = format

        #Creating Table Headers
        set_headers(create_new_row(sheet),conditions[:table_headers])
        records[0].each do|array|
          #Creating Table Rows
          row = create_new_row(sheet)
          row.replace array
        end
        
        row = create_new_row(sheet)
        row.replace ["Override amount($) : #{decimal_rounding(records[1])} , Final bill amount($) : #{decimal_rounding(records[2])}"]
        row.default_format = format
        total_expenses.delete(label)
      end
      row = create_new_row(sheet)
    end#total_data

    row = create_new_row(sheet)
    total_expenses.each do|label,col|
      next if col[0] == []
      row = create_new_row(sheet)
      row.replace ["#{(conditions[:select] == "matter") ? "Matter : #{label} Contact : #{}" : "Contact : #{label}" } "]
      row.default_format = format
      row = create_new_row(sheet)
      row.replace ["Expenses Accounted"]
      row.default_format = format
      col[0].each do|array|
        #Creating Table Rows
        row = create_new_row(sheet)
        row.replace array
      end
      row = create_new_row(sheet)
      #row.replce ["Override amount($) #{col[1]} , Final bill amount($) #{col[2]}"]
      row.default_format = format
      row = create_new_row(sheet)
    end

    if total_data.length <=0 && total_expenses.length <= 0
      row = create_new_row(sheet)
      row.replace ["Total Record = 0"]
    end

    report =  StringIO.new
    (book.write report )
    report.string

  end


  #if the generated data from controller is in the form of Hash in Hash please call generate_report_with_hash_in_hash method
  def self.generate_report_with_hash_in_hash(total_data,headers,len,opts,conditions)


    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    #setting column width and format
    column_format = Spreadsheet::Format.new :text_wrap => true ,:shrink => true
    headers.size.times{|column| sheet.column(column).width = 40 ; sheet.column(column).default_format = column_format}
    #sheet2.instance_variable_set("@index",-1) # if required

    #Creating Report Headers
    set_report_headers(sheet,opts)

    row = create_new_row(sheet)
    if len > 0
      row = create_new_row(sheet)
      row.replace ["Total Records = #{len}"]
      row.default_format = format
    end
    row = create_new_row(sheet)
    label,a_hash,a_label = nil,nil,nil
    total_data.each do |label,a_hash|
      row = create_new_row(sheet)
      
      row.replace ["#{(label == "" or !label) ? "None" : label}     Contacts (#{conditions[label]} Records) "]
      row.default_format = format
      a_hash.each do|a_label,records|

        row = create_new_row(sheet)
        val=  records.length > 1 ? "Records" : "Record"
        row.replace ["Account : #{a_label} (#{records.length} #{val})"]
        row.default_format = format
        #Creating Table Headers
        set_headers(create_new_row(sheet),headers)
       
        records.each do|array|
          #Creating Table Rows
          row = create_new_row(sheet)
          row.replace array
          sheet.row(row.idx).height = 25
        end
        row = create_new_row(sheet)
      end #a_hash
      row = create_new_row(sheet)
    end#total_data

    row = create_new_row(sheet)

    if len > 0
      row = create_new_row(sheet)
      row.replace ["Total Records = #{len}"]
      row.default_format = format
    end


    report =  StringIO.new
    (book.write report )
    report.string

  end


  def self.generate_report_with_array(total_data,headers,len,opts,conditions)
    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    #sheet2.instance_variable_set("@index",-1) # if required
    #formatting column with and row height
    column_format = Spreadsheet::Format.new :text_wrap => true ,:shrink => true
    headers.size.times{|column| sheet.column(column).width = 30 ; sheet.column(column).default_format = column_format}
    total = total_data.size
    (9..(total + 9)).each {|rows| sheet.row(rows).height = 40}
    #Creating Report Headers
    set_report_headers(sheet,opts)

    row = create_blank_multiple_rows(sheet,3)
    if conditions[:opportunity_pipe] and len > 0
      row.replace ["Total Records = #{len}  Amount = #{conditions[:amount]}"]
    elsif conditions[:opportunity_open] and len > 0
      row.replace ["Total Records = #{len}   Total Amount = #{conditions[:amount]} Average Ageing = #{total/total_data.length}"]
    elsif conditions[:time_billed_rpt] and len > 0
      row.replace ["Total Records = #{len}"]
    elsif conditions[:matter_task_status] or conditions[:matter_team_tasks]
      row.replace ["No. of Tasks : #{conditions[:total_tasks]}"]
    elsif len > 0
      val=  len > 1 ? "Records" : "Record"
      row.replace ["Total #{val} = #{len}"]
    end
    row.default_format = format

    row = create_new_row(sheet) #Empty row
    if conditions[:inactive_act] or conditions[:active_act]
      row = create_new_row(sheet)
      row.push "#{conditions[:table_name]}"
      row.default_format = format
      create_new_row(sheet)
    end
    unless total_data.empty?
      #Creating Table Headers
      set_headers(create_new_row(sheet),headers)
      total_data.each do|array|
        #Creating Table Rows
        row = create_new_row(sheet)
        row.replace array
      end

      row = create_new_row(sheet)
    

      if conditions[:time_accounted_rpt]
        if conditions[:select] == "all"
          row = create_new_row(sheet)
          row.replace ["Duration(hrs) : #{decimal_rounding(conditions[:all_entries][0])} Bill Amount : #{decimal_rounding(conditions[:all_entries][1])} Discount : #{decimal_rounding(conditions[:all_entries][2])} Override amount ($) : #{decimal_rounding(conditions[:all_entries][3])} Final Bill amount ($) : #{decimal_rounding(conditions[:all_entries][4])}"]
          row.default_format = format
          row = create_new_row(sheet)
        elsif conditions[:select] == "internal"
          row = create_new_row(sheet)
          row.replace ["Duration(hrs) : #{decimal_rounding(conditions[:internal_entries][0])}"]
          row.default_format = format
          row = create_new_row(sheet)
        end
        #pdf.move_down 20
      
      end
    
      row = create_new_row(sheet)
#      if conditions[:opp_sources]
#      elsif len > 0
        row.push "Total #{val} = #{len}"
        row.default_format = format
#      end
    else
      row = create_new_row(sheet)
      row.push "Total Record = 0"
      row.default_format = format
    end

    report =  StringIO.new
    (book.write report )
    report.string

  end

  def self.generate_compliance_report(total_data,authorities_depts,depts_authorities,ghash,header_opts,opts)

    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    #sheet2.instance_variable_set("@index",-1) # if required

    #Creating Report Headers
    set_report_headers(sheet,header_opts)

    row = create_new_row(sheet)

    
    headers = (depts_authorities.keys)
    set_headers(create_new_row(sheet),["",""] + headers)

    #Set into Array format
    columns = [["Completed (on Time)",:completed],["Completed (Late)",:completed_late],["Filed (on Time)",:filed],["Filed (Late)",:filed_late],["Overdue",:due]]
    columns.each do |array|
      rec = [array[0],ghash[array[1]]]
      headers.each do|key|
        rec << depts_authorities[key][array[1]]
      end
      row = create_new_row(sheet)
      row.replace rec
    end

    row = create_blank_multiple_rows(sheet,2)
    row.replace ["","Total=#{opts[:total]}"]
    row = create_new_row(sheet)
       
    
    set_headers(create_new_row(sheet),[opts[:flag] == "dept" ? "Authority" : "Department" , "Status","Completed","","Overdue"])
    row = create_new_row(sheet)
    row.replace ["","","Ontime","Late",""]
    #Set into Array format
    authorities_depts.keys.each do |key|
      row = create_new_row(sheet)
      row.replace [key,"",authorities_depts[key][:completed],authorities_depts[key][:completed_late],authorities_depts[key][:due]]
    end

    row = create_new_row(sheet)

    total_data.each do |label,hash|
      hash.sort.each do |status,records|
      
        #Creating Table Label
        row = create_new_row(sheet)

   
        row.replace [label.to_s + " - " + status]
     
        row.default_format = format

        #Creating Table Headers
        set_headers(create_new_row(sheet),["","Status","Due Date","Filing at","Completed at"])

        records.each do|array|
          #Creating Table Rows
          row = create_new_row(sheet)
          row.replace array
        end
      
        row = create_new_row(sheet) #Empty row
      end #hash
    end #total_data.each

    report =  StringIO.new
    (book.write report )
    report.string

  end

    def self.generate_excel_report_for_contacts(total_data,total_header,headers,opts)
    book = Spreadsheet::Workbook.new
    sheet = book.create_worksheet
    #sheet2 = book.create_worksheet
    #Note : When working on multiple sheets, each sheet should have its own instance variable @index
    sheet.instance_variable_set("@index",-1)
    #sheet2.instance_variable_set("@index",-1) # if required
    #Creating Report Headers
    #set_report_headers(sheet,opts)
    row = create_new_row(sheet)
    row.default_format = format
    row.replace ["Contacts Report for Law Firm",opts]
    row = create_new_row(sheet)
    row.default_format = format
    set_headers(create_new_row(sheet),headers)
    total_data.each do |records|
      next if records == []            
      #Creating Table Headers      
      row = create_new_row(sheet)
      row.replace records
    end
      report =  StringIO.new
      (book.write report)
      report.string  
  end

  def self.format_amount(num)
    if num.present?
      number=  num.to_f.fixed_precision(2).to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse

      number
    else
      "0.00"
    end
  end



end
