module Report
	# common methods
	# it returns report name
	def report_name
		
	end

	#it returns report generated by name
	def generated_by
		
	end

	#it returns report name
	def generated_on
		
	end
	
	#it returns law firm name
	def client_name
		
	end

	def get_employee(emp_user_id)
		User.find(emp_user_id)
	end

	def get_company(company_id)
		Company.find(company_id)
	end

		# validate date start_date is less than = to end date
	def validate_date?(start_date,end_date)
		start_date <= end_date
	end

	# by passing start date end date by default start date and end date string is created_at
	# if date range is not related to created_at it can be change
	def build_condition_for_date(start_date, end_date, start_date_string="created_at", end_date_string="created_at")
		" #{start_date_string} >= '#{start_date.to_time}' and #{end_date_string} <= '#{end_date.to_time + 1.day}'  " if validate_date?(start_date,end_date)
	end

	# if record is to my then it will search from his assigned_id
	# default assigned_id is assigned_to_employee_user_id
	# if this is change some where pass it accordingly
	def build_conditions_for_my_or_all(emp_user_id,company_id,record_type="My",assigned_id="assigned_to_employee_user_id")
		if record_type == "My"
			" #{assigned_id} = #{emp_user_id} and company_id = #{company_id} "
		else
			"company_id = #{company_id}"
		end
	end

	# passing name,group_by_id,model_name
	# eg ("stage","contact_stage_id","ContactStage")
	# it will return {"stage"=>{"group_by_id"=>"contact_stage_id","model_name"=>"ContactStage","column_name"=>"alvalue"}}
	
	def set_group_by_clause(name,group_by_id,model_name,column_name)
		{name=>{"group_by_id"=>group_by_id,"model_name"=>model_name.camelize,"column_name"=>column_name}}
	end

	def display_group_name(group_by,id,label)
		if id.present?
			id = id.pop if id.is_a?(Array) && id.length == 1
			group_by["model_name"].constantize.find(id).send(group_by["column_name"]).try(:to_s).try(:titleize) rescue label.try(:titleize)
		else
			label.try(:titleize)
		end
	end

  def display_total_record_label(no_of_records)
    "Total #{display_record(no_of_records)} = #{no_of_records}"

  end

	def display_record(no_of_records)
		 no_of_records <=1 ? "Record" : "Records"
	end

	
end
